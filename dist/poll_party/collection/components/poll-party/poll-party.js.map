{"version":3,"file":"poll-party.js","sourceRoot":"","sources":["../../../src/components/poll-party/poll-party.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, State, h, Element, Host } from \"@stencil/core\";\r\nimport PartySocket from \"partysocket\";\r\nimport state from \"./store\";\r\nimport hash from \"object-hash\";\r\n\r\ntype Poll = {\r\n  question: string;\r\n  options: {\r\n    [key: string]: string;\r\n  };\r\n};\r\n\r\ntype Votes = {\r\n  [key: string]: number;\r\n};\r\n\r\n@Component({\r\n  tag: \"poll-party\",\r\n  styleUrl: \"poll-party.css\",\r\n  shadow: true,\r\n})\r\nexport class PollParty {\r\n  @Element() hostEl: HTMLDivElement;\r\n  @Prop() host: string;\r\n  @Prop() party: string | null = null;\r\n  @State() room: string; // derived from poll\r\n  @State() poll: Poll;\r\n  @State() votes: Votes = {};\r\n  @State() socket: PartySocket;\r\n\r\n  // For the form\r\n  @State() selectedOption: string | null = null;\r\n\r\n  async componentWillLoad() {\r\n    // Build the poll from elements in the DOM. There should be an\r\n    // element called 'question' and a number of elements called 'option'.\r\n    // Each option element has an id attr and a text node.\r\n    const options: { [key: string]: string } = Object.fromEntries(\r\n      Array.from(this.hostEl.querySelectorAll(\"option\")).map((el) => [\r\n        el.id,\r\n        el.innerHTML,\r\n      ])\r\n    );\r\n    const poll: Poll = {\r\n      question: this.hostEl.querySelector(\"question\").innerHTML,\r\n      options,\r\n    };\r\n\r\n    this.poll = poll;\r\n    this.room = hash(poll);\r\n\r\n    this.socket = new PartySocket({\r\n      host: this.host,\r\n      party: this.party,\r\n      room: this.room,\r\n    });\r\n\r\n    this.socket.addEventListener(\"message\", async (e) => {\r\n      const msg = JSON.parse(e.data);\r\n      if (msg.type === \"sync\") {\r\n        this.votes = msg.votes;\r\n      }\r\n    });\r\n  }\r\n\r\n  async componentDidLoad() {\r\n    // Nothing\r\n  }\r\n\r\n  async submitVote(e) {\r\n    console.log(\"submitting vote\");\r\n    e.preventDefault();\r\n    //const formData = new FormData(e.target);\r\n    //const option = formData.get(\"option\") as string;\r\n    const option = this.selectedOption;\r\n    this.socket.send(\r\n      JSON.stringify({\r\n        type: \"vote\",\r\n        option: option,\r\n      })\r\n    );\r\n    // add this.name to state.hasVoted (a list)\r\n    state.hasVoted = [...state.hasVoted, this.room];\r\n    // Update the poll results locally. This will be overwritten when the socket\r\n    // sends a sync message\r\n    this.votes = {\r\n      ...this.votes,\r\n      [option]: (this.votes[option] || 0) + 1,\r\n    };\r\n    this.selectedOption = null;\r\n  }\r\n\r\n  async resetPoll() {\r\n    // remove this.room from state.hasVoted (a list)\r\n    state.hasVoted = state.hasVoted.filter((name) => name !== this.room);\r\n  }\r\n\r\n  render() {\r\n    if (!this.poll) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    const hasVoted = state.hasVoted.find((room) => room === this.room)\r\n      ? true\r\n      : false;\r\n\r\n    const totalVotes = Object.values(this.votes).reduce(\r\n      (acc, curr) => acc + curr,\r\n      0\r\n    );\r\n    const maxVotes = Math.max(...Object.values(this.votes));\r\n\r\n    return (\r\n      <Host>\r\n        <div class=\"poll-party styled\">\r\n          <header>\r\n            <h1>{this.poll.question}</h1>\r\n            <div class=\"total\">\r\n              {totalVotes} :مجموع الردود\r\n            </div>\r\n          </header>\r\n          {hasVoted ? (\r\n            <div class=\"results\">\r\n              <table>\r\n                {Object.entries(this.poll.options).map(([option, desc]) => {\r\n                  const votes = this.votes[option] || 0;\r\n                  return (\r\n                    <tr>\r\n                      <td>{desc}</td>\r\n                      <td>\r\n                        <strong>{votes}</strong>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"bar\">\r\n                          <div\r\n                            class=\"bar-inner\"\r\n                            style={{\r\n                              width: `${(votes / maxVotes) * 100}%`,\r\n                            }}\r\n                          ></div>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </table>\r\n\r\n            </div>\r\n          ) : (\r\n            <form onSubmit={(e) => this.submitVote(e)}>\r\n              <div class=\"options\">\r\n                {Object.entries(this.poll.options).map(([option, desc]) => (\r\n                  <label>\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"option\"\r\n                      value={option}\r\n                      onChange={() => {\r\n                        this.selectedOption = option;\r\n                      }}\r\n                    />\r\n                    {desc}\r\n                  </label>\r\n                ))}\r\n              </div>\r\n              <button type=\"submit\" disabled={this.selectedOption === null}>\r\n                قم بالتصويت\r\n              </button>\r\n            </form>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}